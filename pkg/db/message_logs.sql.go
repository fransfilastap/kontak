// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: message_logs.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getMessageHistory = `-- name: GetMessageHistory :many
SELECT id, device_id, user_id, recipient, recipient_type, message_type, content, media_url, media_filename, buttons, template_id, status, sent_at, delivered_at, read_at
FROM message_logs
WHERE user_id = $1
ORDER BY sent_at DESC
LIMIT $2
`

type GetMessageHistoryParams struct {
	UserID pgtype.Int4 `json:"user_id"`
	Limit  int64       `json:"limit"`
}

func (q *Queries) GetMessageHistory(ctx context.Context, arg GetMessageHistoryParams) ([]MessageLog, error) {
	rows, err := q.db.Query(ctx, getMessageHistory, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MessageLog
	for rows.Next() {
		var i MessageLog
		if err := rows.Scan(
			&i.ID,
			&i.DeviceID,
			&i.UserID,
			&i.Recipient,
			&i.RecipientType,
			&i.MessageType,
			&i.Content,
			&i.MediaUrl,
			&i.MediaFilename,
			&i.Buttons,
			&i.TemplateID,
			&i.Status,
			&i.SentAt,
			&i.DeliveredAt,
			&i.ReadAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const sendMessageData = `-- name: SendMessageData :one
INSERT INTO message_logs (device_id,
                          user_id,
                          recipient,
                          recipient_type,
                          message_type,
                          content,
                          media_url,
                          media_filename,
                          buttons,
                          status)
VALUES ($1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7::text, -- or NULL
        $8::varchar(255), -- or NULL
        $9::jsonb, -- or NULL
        'sent')
RETURNING id, device_id, user_id, recipient, recipient_type, message_type, content, media_url, media_filename, buttons, template_id, status, sent_at, delivered_at, read_at
`

type SendMessageDataParams struct {
	DeviceID      pgtype.Text `json:"device_id"`
	UserID        pgtype.Int4 `json:"user_id"`
	Recipient     string      `json:"recipient"`
	RecipientType pgtype.Text `json:"recipient_type"`
	MessageType   pgtype.Text `json:"message_type"`
	Content       string      `json:"content"`
	Column7       string      `json:"column_7"`
	Column8       string      `json:"column_8"`
	Column9       []byte      `json:"column_9"`
}

func (q *Queries) SendMessageData(ctx context.Context, arg SendMessageDataParams) (MessageLog, error) {
	row := q.db.QueryRow(ctx, sendMessageData,
		arg.DeviceID,
		arg.UserID,
		arg.Recipient,
		arg.RecipientType,
		arg.MessageType,
		arg.Content,
		arg.Column7,
		arg.Column8,
		arg.Column9,
	)
	var i MessageLog
	err := row.Scan(
		&i.ID,
		&i.DeviceID,
		&i.UserID,
		&i.Recipient,
		&i.RecipientType,
		&i.MessageType,
		&i.Content,
		&i.MediaUrl,
		&i.MediaFilename,
		&i.Buttons,
		&i.TemplateID,
		&i.Status,
		&i.SentAt,
		&i.DeliveredAt,
		&i.ReadAt,
	)
	return i, err
}
