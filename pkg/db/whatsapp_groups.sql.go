// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: whatsapp_groups.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getDeviceGroups = `-- name: GetDeviceGroups :many
SELECT id, device_id, group_id, group_name, group_description, participant_count, created_at, updated_at
FROM whatsapp_groups
WHERE device_id = $1
ORDER BY group_name ASC
`

func (q *Queries) GetDeviceGroups(ctx context.Context, deviceID pgtype.Text) ([]WhatsappGroup, error) {
	rows, err := q.db.Query(ctx, getDeviceGroups, deviceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WhatsappGroup
	for rows.Next() {
		var i WhatsappGroup
		if err := rows.Scan(
			&i.ID,
			&i.DeviceID,
			&i.GroupID,
			&i.GroupName,
			&i.GroupDescription,
			&i.ParticipantCount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertWhatsAppGroup = `-- name: UpsertWhatsAppGroup :exec
INSERT INTO whatsapp_groups (device_id,
                             group_id,
                             group_name,
                             group_description,
                             participant_count,
                             updated_at)
VALUES ($1, $2, $3, $4, $5, $6)
ON CONFLICT (device_id, group_id)
    DO UPDATE SET group_name        = EXCLUDED.group_name,
                  group_description = EXCLUDED.group_description,
                  participant_count = EXCLUDED.participant_count,
                  updated_at        = EXCLUDED.updated_at
`

type UpsertWhatsAppGroupParams struct {
	DeviceID         pgtype.Text        `json:"device_id"`
	GroupID          string             `json:"group_id"`
	GroupName        string             `json:"group_name"`
	GroupDescription pgtype.Text        `json:"group_description"`
	ParticipantCount pgtype.Int4        `json:"participant_count"`
	UpdatedAt        pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpsertWhatsAppGroup(ctx context.Context, arg UpsertWhatsAppGroupParams) error {
	_, err := q.db.Exec(ctx, upsertWhatsAppGroup,
		arg.DeviceID,
		arg.GroupID,
		arg.GroupName,
		arg.GroupDescription,
		arg.ParticipantCount,
		arg.UpdatedAt,
	)
	return err
}
