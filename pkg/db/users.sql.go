// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, password)
VALUES ($1, $2)
RETURNING id, email, password, created_at, updated_at, api_key_prefix, api_key
`

type CreateUserParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ApiKeyPrefix,
		&i.ApiKey,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE
FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByAPIKey = `-- name: GetUserByAPIKey :one
SELECT id, email, password, created_at, updated_at, api_key_prefix, api_key
FROM users
WHERE api_key = $1
LIMIT 1
`

func (q *Queries) GetUserByAPIKey(ctx context.Context, apiKey pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUserByAPIKey, apiKey)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ApiKeyPrefix,
		&i.ApiKey,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, password, created_at, updated_at, api_key_prefix, api_key
FROM users
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ApiKeyPrefix,
		&i.ApiKey,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, email, password, created_at, updated_at, api_key_prefix, api_key
FROM users
WHERE email = $1
LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ApiKeyPrefix,
		&i.ApiKey,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, email, password, created_at, updated_at, api_key_prefix, api_key
FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Password,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ApiKeyPrefix,
			&i.ApiKey,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const revokeUserAPIKey = `-- name: RevokeUserAPIKey :exec
UPDATE users
SET api_key        = NULL,
    api_key_prefix = NULL
WHERE id = $1
`

func (q *Queries) RevokeUserAPIKey(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, revokeUserAPIKey, id)
	return err
}

const setUserAPIKey = `-- name: SetUserAPIKey :one
UPDATE users
SET api_key        = $1,
    api_key_prefix = $2
WHERE id = $3
RETURNING id, email, password, created_at, updated_at, api_key_prefix, api_key
`

type SetUserAPIKeyParams struct {
	ApiKey       pgtype.Text `json:"api_key"`
	ApiKeyPrefix pgtype.Text `json:"api_key_prefix"`
	ID           int32       `json:"id"`
}

func (q *Queries) SetUserAPIKey(ctx context.Context, arg SetUserAPIKeyParams) (User, error) {
	row := q.db.QueryRow(ctx, setUserAPIKey, arg.ApiKey, arg.ApiKeyPrefix, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ApiKeyPrefix,
		&i.ApiKey,
	)
	return i, err
}

const setUserAPIPrefix = `-- name: SetUserAPIPrefix :exec
UPDATE users
SET api_key_prefix = $1
WHERE id = $2
`

type SetUserAPIPrefixParams struct {
	ApiKeyPrefix pgtype.Text `json:"api_key_prefix"`
	ID           int32       `json:"id"`
}

func (q *Queries) SetUserAPIPrefix(ctx context.Context, arg SetUserAPIPrefixParams) error {
	_, err := q.db.Exec(ctx, setUserAPIPrefix, arg.ApiKeyPrefix, arg.ID)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET email = $2,
    password = $3
WHERE id = $1
RETURNING id, email, password, created_at, updated_at, api_key_prefix, api_key
`

type UpdateUserParams struct {
	ID       int32  `json:"id"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.ID, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ApiKeyPrefix,
		&i.ApiKey,
	)
	return i, err
}
