// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: clients.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createNewClient = `-- name: CreateNewClient :one

INSERT INTO clients (id,
                     name,
                     whatsapp_number,
                     jid,
                     user_id,
                     is_connected)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, name, whatsapp_number, jid, qr_code, is_connected, created_at, updated_at, deleted_at, user_id
`

type CreateNewClientParams struct {
	ID             string      `json:"id"`
	Name           string      `json:"name"`
	WhatsappNumber pgtype.Text `json:"whatsapp_number"`
	Jid            pgtype.Text `json:"jid"`
	UserID         pgtype.Int4 `json:"user_id"`
	IsConnected    pgtype.Bool `json:"is_connected"`
}

// filename: queries/clients/create_new_client.sql
func (q *Queries) CreateNewClient(ctx context.Context, arg CreateNewClientParams) (Client, error) {
	row := q.db.QueryRow(ctx, createNewClient,
		arg.ID,
		arg.Name,
		arg.WhatsappNumber,
		arg.Jid,
		arg.UserID,
		arg.IsConnected,
	)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.WhatsappNumber,
		&i.Jid,
		&i.QrCode,
		&i.IsConnected,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.UserID,
	)
	return i, err
}

const deleteClient = `-- name: DeleteClient :exec
DELETE
FROM clients
WHERE ID = $1
`

func (q *Queries) DeleteClient(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteClient, id)
	return err
}

const getClient = `-- name: GetClient :one
SELECT id, name, whatsapp_number, jid, qr_code, is_connected, created_at, updated_at, deleted_at, user_id
FROM clients WHERE id = $1 LIMIT 1
`

func (q *Queries) GetClient(ctx context.Context, id string) (Client, error) {
	row := q.db.QueryRow(ctx, getClient, id)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.WhatsappNumber,
		&i.Jid,
		&i.QrCode,
		&i.IsConnected,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.UserID,
	)
	return i, err
}

const getClientByJID = `-- name: GetClientByJID :one
SELECT id, name, whatsapp_number, jid, qr_code, is_connected, created_at, updated_at, deleted_at, user_id
FROM clients
WHERE jid = $1
LIMIT 1
`

func (q *Queries) GetClientByJID(ctx context.Context, jid pgtype.Text) (Client, error) {
	row := q.db.QueryRow(ctx, getClientByJID, jid)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.WhatsappNumber,
		&i.Jid,
		&i.QrCode,
		&i.IsConnected,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.UserID,
	)
	return i, err
}

const getClients = `-- name: GetClients :many
SELECT id, name, whatsapp_number, jid, qr_code, is_connected, created_at, updated_at, deleted_at, user_id
FROM clients
`

func (q *Queries) GetClients(ctx context.Context) ([]Client, error) {
	rows, err := q.db.Query(ctx, getClients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Client
	for rows.Next() {
		var i Client
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.WhatsappNumber,
			&i.Jid,
			&i.QrCode,
			&i.IsConnected,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setClientJID = `-- name: SetClientJID :one
UPDATE clients
SET jid = $1
WHERE ID = $2
RETURNING id, name, whatsapp_number, jid, qr_code, is_connected, created_at, updated_at, deleted_at, user_id
`

type SetClientJIDParams struct {
	Jid pgtype.Text `json:"jid"`
	ID  string      `json:"id"`
}

func (q *Queries) SetClientJID(ctx context.Context, arg SetClientJIDParams) (Client, error) {
	row := q.db.QueryRow(ctx, setClientJID, arg.Jid, arg.ID)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.WhatsappNumber,
		&i.Jid,
		&i.QrCode,
		&i.IsConnected,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.UserID,
	)
	return i, err
}

const setConnectionStatus = `-- name: SetConnectionStatus :one
UPDATE clients
SET is_connected = $1
WHERE ID = $2
RETURNING id, name, whatsapp_number, jid, qr_code, is_connected, created_at, updated_at, deleted_at, user_id
`

type SetConnectionStatusParams struct {
	IsConnected pgtype.Bool `json:"is_connected"`
	ID          string      `json:"id"`
}

func (q *Queries) SetConnectionStatus(ctx context.Context, arg SetConnectionStatusParams) (Client, error) {
	row := q.db.QueryRow(ctx, setConnectionStatus, arg.IsConnected, arg.ID)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.WhatsappNumber,
		&i.Jid,
		&i.QrCode,
		&i.IsConnected,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.UserID,
	)
	return i, err
}

const updateQRCode = `-- name: UpdateQRCode :one
UPDATE clients
SET qr_code = $1
WHERE ID = $2
RETURNING id, name, whatsapp_number, jid, qr_code, is_connected, created_at, updated_at, deleted_at, user_id
`

type UpdateQRCodeParams struct {
	QrCode pgtype.Text `json:"qr_code"`
	ID     string      `json:"id"`
}

func (q *Queries) UpdateQRCode(ctx context.Context, arg UpdateQRCodeParams) (Client, error) {
	row := q.db.QueryRow(ctx, updateQRCode, arg.QrCode, arg.ID)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.WhatsappNumber,
		&i.Jid,
		&i.QrCode,
		&i.IsConnected,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.UserID,
	)
	return i, err
}
