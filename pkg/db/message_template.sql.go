// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: message_template.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createNewMessageTemplate = `-- name: CreateNewMessageTemplate :one
insert into message_templates (user_id, name, content, variables)
values ($1, $2, $3, $4)
returning id, user_id, name, content, variables, created_at, updated_at
`

type CreateNewMessageTemplateParams struct {
	UserID    pgtype.Int4 `json:"user_id"`
	Name      string      `json:"name"`
	Content   string      `json:"content"`
	Variables []byte      `json:"variables"`
}

func (q *Queries) CreateNewMessageTemplate(ctx context.Context, arg CreateNewMessageTemplateParams) (MessageTemplate, error) {
	row := q.db.QueryRow(ctx, createNewMessageTemplate,
		arg.UserID,
		arg.Name,
		arg.Content,
		arg.Variables,
	)
	var i MessageTemplate
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Content,
		&i.Variables,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMessageTemplate = `-- name: DeleteMessageTemplate :exec
delete
from message_templates
where id = $1
  and user_id = $2
`

type DeleteMessageTemplateParams struct {
	ID     pgtype.UUID `json:"id"`
	UserID pgtype.Int4 `json:"user_id"`
}

func (q *Queries) DeleteMessageTemplate(ctx context.Context, arg DeleteMessageTemplateParams) error {
	_, err := q.db.Exec(ctx, deleteMessageTemplate, arg.ID, arg.UserID)
	return err
}

const getMessageTemplateByID = `-- name: GetMessageTemplateByID :one
SELECT id, user_id, name, content, variables, created_at, updated_at
FROM message_templates
WHERE id = $1
`

func (q *Queries) GetMessageTemplateByID(ctx context.Context, id pgtype.UUID) (MessageTemplate, error) {
	row := q.db.QueryRow(ctx, getMessageTemplateByID, id)
	var i MessageTemplate
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Content,
		&i.Variables,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserTemplates = `-- name: GetUserTemplates :many
SELECT id, user_id, name, content, variables, created_at, updated_at
FROM message_templates
where user_id = $1
order by created_at desc
`

func (q *Queries) GetUserTemplates(ctx context.Context, userID pgtype.Int4) ([]MessageTemplate, error) {
	rows, err := q.db.Query(ctx, getUserTemplates, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MessageTemplate
	for rows.Next() {
		var i MessageTemplate
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Content,
			&i.Variables,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMessageTemplate = `-- name: UpdateMessageTemplate :one
update message_templates
set name      = $1,
    content   = $2,
    variables = $3
where id = $4
  and user_id = $5
returning id, user_id, name, content, variables, created_at, updated_at
`

type UpdateMessageTemplateParams struct {
	Name      string      `json:"name"`
	Content   string      `json:"content"`
	Variables []byte      `json:"variables"`
	ID        pgtype.UUID `json:"id"`
	UserID    pgtype.Int4 `json:"user_id"`
}

func (q *Queries) UpdateMessageTemplate(ctx context.Context, arg UpdateMessageTemplateParams) (MessageTemplate, error) {
	row := q.db.QueryRow(ctx, updateMessageTemplate,
		arg.Name,
		arg.Content,
		arg.Variables,
		arg.ID,
		arg.UserID,
	)
	var i MessageTemplate
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Content,
		&i.Variables,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
